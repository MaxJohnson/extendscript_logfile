/*
MIT License

Copyright (c) 2019 Max Johnson

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/


/* README.md
# Summary
 An Adobe ExtendScript compatible log file constructor with some built in
 convenience functions in a UMD wrapper for cross-compatability with AMD and
 node.js require.

Tries to be flexible but automate most things.

# Features
- Works with node.js require, AMD(probably), and vanilla ExtendScript.
- Tries to make a log file in ./logs with fallback to ~/Desktop/ExtendScript_Log_UnsavedScripts/
- Tries to clean up old files automatically (or keep them foreverrr)
- Plays nice with [ExtendScript_Log](https://github.com/MaxJohnson/extendscript_log)

# Import
## NPM
If running Node NPM, you can `npm install ExtendScript_Log` to add to your node_modules folder
## github
Clone or download the repo and copy the extendscript_logfile.jsxinc to your project

# Include

## NPM
`var LogFile = require("ExtendScript_LogFile");`

## AMD
I don't know but it's probably not difficult? Firmly in the untested-but-should-work category

## ExtendScript
### Eval into environment
`$.evalFile("<path>/extendscript_logfile.jsxinc")`

### Include in scripts
`//@include "<path>/extendscript_logfile.jsxinc"`

### concatinate or copy-paste directly
Add to a build script or, I dunno, just copy-pasta it in there?

# Use:

## Make new LogFile object
make a new log file and you get a separate instance
```
var myLogFile = new ExtendScript_LogFile();
myLogFile.log('Hey there.');
```
### Constructor options
"new" constructor takes 4 optional arguments.

```new ExtendScript_LogFile (root, logType, logDir, useDate)```

#### Argument 1 : root
is an alternate root object to tack on a 'logFile' alias
By passing $.global as first arg, we get global log and console objects!

```
root = $.global;// root to add convenience aliases to

var myExplicitLogFileVariable = new ExtendScript_LogFile(root);
myExplicitLogFileVariable.log('So explicit!');// call from a var
logFile.log('Like magic.');// uses the $.global.logFile we made
```

#### Argument 2 : logType
 specifies a non-"default" *type* and makes a file name
```
var myLogFile = new ExtendScript_LogFile();
myLogFile.log('Hey there.');

var specialLogFile = new ExtendScript_LogFile(null,"special");
specialLogFile.log('Salutations.');

// prints to:
// ./logs/default_2021-05-28T16-15-37.611.log >>[2021-05-28T16:15:37.612] default : Hey there.
// ./logs/special_2021-05-28T16-15-37.656.log >>[2021-05-28T16:15:37.657] special : Salutations.
```

#### Argument 3 : logDir (default: './logs/')
a non-"default" directory path to save the log to
```
root = $.global;// root to add convenience aliases to
logType = "special";// name other than "default"
logDir = '~/Desktop/mylogcabin/';// custom log directory

var myLogFile = new ExtendScript_LogFile(root, logType, logDir);
myLogFile.log('Salutations.');

// prints to:
// ~/Desktop/mylogcabin/special_2021-05-28T16-15-37.656.log >>[2021-05-28T16:15:37.657] special : Salutations.
```

#### Argument 3 : useDate (default: true)
specifies if the date should be prepended to the log entries
can be changed with `.useDate(false)`
```
root = $.global;// root to add convenience aliases to
logType = "special";// name other than "default"
logDir = '~/Desktop/mylogcabin/';// custom log directory
useDate = false;

var myLogFile = new ExtendScript_LogFile(root, logType, logDir, useDate);

myLogFile.log('Salutations.');

// prints to:
// ~/Desktop/mylogcabin/special_2021-05-28T16-15-37.656.log >> special : Salutations.
```

## Use the log file
`.log()` and `.writeln()` do the same thing...

`.useDate(false)` will disable the date printing in each entry

### Attatch to namespace or other log object
```
myLogFile = new ExtendScript_Log($.global);
logFile.log('Messages are good.');

var namespace = {};// maybe some other log system?

myLogSafeFile = new ExtendScript_Log(namespace);
namespace.logFile.log('This is way safer.');
```
## Cleanup
You can `.clear()` the contents or `.remove()` the file from disk.

You can also clear out of the same *type* with `.removeOld()` for non-current or `.removeAll()` for all.
```
myLogFile = new ExtendScript_Log();
logfile.log('Messages are good.');

myLogSafeFile = new ExtendScript_Log(namespace,'special');
namespace.logFile.log('This is way safer.');

myLogSafeFile.remove();

// make a bunch of "default" logs...
myLogFile = new ExtendScript_Log();
myLogFile = new ExtendScript_Log();
myLogFile = new ExtendScript_Log();
myLogFile = new ExtendScript_Log();

// purge all but latest "default" log.
myLogFile.removeOld();

// now only the current "default" file is left
myLogFile.removeAll();

myLogSafeFile = new ExtendScript_Log(namespace);

```

# Bonus Features
## Logs for unsaved scripts:
Tries to make a log file in ./logs in the location of the currently running
script, but will fall back to ~/Desktop/ExtendScript_Log_UnsavedScripts/

## Compatible with ExtendScript_Log:
This is used as a optional extra in [ExtendScript_Log](https://github.com/MaxJohnson/extendscript_log)

Like peanutbutter and chocolate...

*/

// Add semicolon to prevent BAD THINGS (TM) from happening to concatenated code.
;

// UMD for compatability with AMD and Node require, but still support a global constructor in the ExtendScript context
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
      define([], factory);
  } else if (typeof module === 'object' && module.exports) {
    // Node. Does not work with strict CommonJS
    module.exports = factory;
  } else {
    // (root is global... so should be $.global for ExtendScript)
    root.ExtendScript_LogFile = factory;
  }
}($.global, function (root, logType, logDir, useDate) {// IIFE straight into the UMD, attaching to the $.global space

    $.strict = true;
    $.writeln("Loading extendscript LogFile...");

    var LogFile = { };
    var _logDir = logDir;
    var _useDate = (useDate !== false);

//helper functions

    // Make a folder and return a file handle.
    function _createLogFile(typeString) {
        var logFileDir = new Folder(_getDirString());
        if (!logFileDir.exists) {
            logFileDir.create();
        }

        var logFileName = typeString + "_" + _getDateString().replace(/[:]/g,'-')+ ".log";
        var logFilePath = _getDirString() + logFileName;
        return new File(logFilePath);
    }

    // Delete the log files that match the "type" name. Tidy up.
    function _removeLogFiles( keepLatest ) {

        var typeString = _getTypeString();
        var removeTime = (LogFile.file instanceof File && LogFile.file.exists)? LogFile.file.created.getTime():new Date().getTime();

        var logFileDir = new Folder(_getDirString());

        if (logFileDir.exists) {
            var logFiles = logFileDir.getFiles();
            for (f = 0; f < logFiles.length; f++) {
                var myFile = logFiles[f];
                var fileTime = myFile.created.getTime();
                var nameSearch = myFile.name.search(typeString + "_");
                if ( ( fileTime < removeTime || keepLatest == false ) && nameSearch > -1) {

                    myFile.remove();
                }
            }
        }
    }

    // Get log "type" or fallback
    function _getTypeString() {
        return LogFile.type||"default"; // account for un-saved or temp scripts
    }

    // Get script dir or fallback to desktop temp folder
    function _getDirString() {
        var dirPath;
        if (_logDir) {
            // user defined
            dirPath = _logDir;
        } else if (File($.fileName).exists) {
            // same directory as script
            dirPath = File($.fileName).path + "/logs/";
        } else {
            // account for un-saved or temp scripts
            dirPath = Folder.desktop + "/ExtendScript_Log_UnsavedScripts/";
        }
        return dirPath; 
    }

    // Overly complex UTC-like date string constructor polyfill
    function _getDateString() {
        var myDate = new Date();
        // forward compatability with ES5 Shims
        if (typeof myDate.getFullYear !== "function") {
            myDate.getFullYear = function() {
                return (myDate.getYear + 1900); // offset from year 1900
            };
        }

        var myYear = myDate.getFullYear().toString();
        var myMonth = _zeroPad(myDate.getMonth() + 1, 2); // counts from 0
        var myDay = _zeroPad(myDate.getDate(), 2);
        var myHours = _zeroPad(myDate.getHours(), 2);
        var myMinutes = _zeroPad(myDate.getMinutes(), 2);
        var mySeconds = _zeroPad(myDate.getSeconds(), 2);

        return myYear + 
        "-" + myMonth + 
        "-" + myDay + 
        "T" + myHours + 
        ':' + myMinutes + 
        ':' + mySeconds +
        '.' + (myDate.getMilliseconds() / 1000).toFixed(3).slice(2, 5);
    }

    // Pad those number strings kid. Pad em good.
    function _zeroPad(num, numZeros) {
        var absNum = Math.abs(num);
        var zeros = Math.max(0, numZeros - Math.floor(absNum).toString().length);
        var zeroString = Math.pow(10, zeros).toString().substr(1);
        if (num < 0) {
            zeroString = '-' + zeroString;
        }

        return zeroString + absNum;
    }

// Public Functions

    //initialization
    LogFile.init = function (logType) {
        LogFile.type = logType;
        LogFile.directory = _getDirString();
        LogFile.file = _createLogFile(_getTypeString());
        
        $.writeln("Initializing new LogFile: " + LogFile.file.path);

        return LogFile;
    };

    //write to file, date added by default
    LogFile.writeln = LogFile.log = function (logMessage) {
        LogFile.file.open("a+");
        if(_useDate) {
            logMessage = '[' + _getDateString() + "] " + logMessage;
        }
        LogFile.file.writeln(logMessage);
        LogFile.file.close();

        return LogFile;
    };

    //cleanup
    LogFile.clear = function () {
        LogFile.file.open("w");
        LogFile.file.close();

        return LogFile;
    };

    //remove this file
    LogFile.remove = function() {
        if(File(LogFile.file).exists) {
            LogFile.file.remove();
        }

        return LogFile;
    };

    // remove all similar files but this one
    LogFile.removeOld = function () {
        _removeLogFiles();
        return LogFile;
    };

    // remove all similar files
    LogFile.removeAll = function () {
        _removeLogFiles(false);
        return LogFile;
    };

    // change log file directory
    LogFile.setDirectory = function (newDir) {
        _logDir = newDir;
        LogFile.init(LogFile.type);
        return LogFile;
    };

    // change log file directory
    LogFile.useDate = function (useDate) {
        _useDate = (useDate !== false);//only false if explicitly stated
        LogFile.init(LogFile.type);
        return LogFile;
    };

    if(root) {
        root.logfile = LogFile;
    }
    // Spit it out already
    return LogFile.init(logType);

}));
